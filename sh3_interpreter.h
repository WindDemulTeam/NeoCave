
#pragma once

#include <cstdint>

namespace sh3 {
class Cpu;
class Interpreter {
 public:
  void Init();
  void Run(int32_t &icount);
  uint32_t Step(uint32_t pc);

  Interpreter(Cpu *c);

 private:
  void IsPrivilege();
  void IsSlotIllegal();

  void Stc(uint32_t n, uint32_t val);
  void Stcm(uint32_t n, uint32_t val);

  uint32_t Ldc(uint32_t m);
  uint32_t Ldcm(uint32_t m);

  Cpu *cpu;
  bool delay_slot_;
  bool branch;

  uint32_t Unknown(uint32_t code);

  uint32_t Add(uint32_t code);
  uint32_t Addc(uint32_t code);
  uint32_t Addi(uint32_t code);
  uint32_t Addv(uint32_t code);
  uint32_t And(uint32_t code);
  uint32_t Andi(uint32_t code);
  uint32_t Andm(uint32_t code);
  uint32_t Bf(uint32_t code);
  uint32_t Bfs(uint32_t code);
  uint32_t Bra(uint32_t code);
  uint32_t Braf(uint32_t code);
  uint32_t Bsr(uint32_t code);
  uint32_t Bsrf(uint32_t code);
  uint32_t Bt(uint32_t code);
  uint32_t Bts(uint32_t code);
  uint32_t Clrmac(uint32_t code);
  uint32_t Clrs(uint32_t code);
  uint32_t Clrt(uint32_t code);
  uint32_t Cmpeq(uint32_t code);
  uint32_t Cmpge(uint32_t code);
  uint32_t Cmpgt(uint32_t code);
  uint32_t Cmphi(uint32_t code);
  uint32_t Cmphs(uint32_t code);
  uint32_t Cmpim(uint32_t code);
  uint32_t Cmppl(uint32_t code);
  uint32_t Cmppz(uint32_t code);
  uint32_t Cmpstr(uint32_t code);
  uint32_t Div0s(uint32_t code);
  uint32_t Div0u(uint32_t code);
  uint32_t Div1(uint32_t code);
  uint32_t Dmuls(uint32_t code);
  uint32_t Dmulu(uint32_t code);
  uint32_t Dt(uint32_t code);
  uint32_t Extsb(uint32_t code);
  uint32_t Extsw(uint32_t code);
  uint32_t Extub(uint32_t code);
  uint32_t Extuw(uint32_t code);
  uint32_t Jmp(uint32_t code);
  uint32_t Jsr(uint32_t code);
  uint32_t Ldcgbr(uint32_t code);
  uint32_t Ldcmgbr(uint32_t code);
  uint32_t Ldcmrbank(uint32_t code);
  uint32_t Ldcmspc(uint32_t code);
  uint32_t Ldcmsr(uint32_t code);
  uint32_t Ldcmssr(uint32_t code);
  uint32_t Ldcmvbr(uint32_t code);
  uint32_t Ldcrbank(uint32_t code);
  uint32_t Ldcspc(uint32_t code);
  uint32_t Ldcsr(uint32_t code);
  uint32_t Ldcssr(uint32_t code);
  uint32_t Ldcvbr(uint32_t code);
  uint32_t Ldsmach(uint32_t code);
  uint32_t Ldsmacl(uint32_t code);
  uint32_t Ldsmmach(uint32_t code);
  uint32_t Ldsmmacl(uint32_t code);
  uint32_t Ldsmpr(uint32_t code);
  uint32_t Ldspr(uint32_t code);
  uint32_t Ldtlb(uint32_t code);
  uint32_t Macl(uint32_t code);
  uint32_t Macw(uint32_t code);
  uint32_t Mov(uint32_t code);
  uint32_t Mova(uint32_t code);
  uint32_t Movbl(uint32_t code);
  uint32_t Movbl0(uint32_t code);
  uint32_t Movbl4(uint32_t code);
  uint32_t Movblg(uint32_t code);
  uint32_t Movbm(uint32_t code);
  uint32_t Movbp(uint32_t code);
  uint32_t Movbs(uint32_t code);
  uint32_t Movbs0(uint32_t code);
  uint32_t Movbs4(uint32_t code);
  uint32_t Movbsg(uint32_t code);
  uint32_t Movcal(uint32_t code);
  uint32_t Movi(uint32_t code);
  uint32_t Movli(uint32_t code);
  uint32_t Movll(uint32_t code);
  uint32_t Movll0(uint32_t code);
  uint32_t Movll4(uint32_t code);
  uint32_t Movllg(uint32_t code);
  uint32_t Movlm(uint32_t code);
  uint32_t Movlp(uint32_t code);
  uint32_t Movls(uint32_t code);
  uint32_t Movls0(uint32_t code);
  uint32_t Movls4(uint32_t code);
  uint32_t Movlsg(uint32_t code);
  uint32_t Movt(uint32_t code);
  uint32_t Movwi(uint32_t code);
  uint32_t Movwl(uint32_t code);
  uint32_t Movwl0(uint32_t code);
  uint32_t Movwl4(uint32_t code);
  uint32_t Movwlg(uint32_t code);
  uint32_t Movwm(uint32_t code);
  uint32_t Movwp(uint32_t code);
  uint32_t Movws(uint32_t code);
  uint32_t Movws0(uint32_t code);
  uint32_t Movws4(uint32_t code);
  uint32_t Movwsg(uint32_t code);
  uint32_t Mull(uint32_t code);
  uint32_t Mulsu(uint32_t code);
  uint32_t Mulsw(uint32_t code);
  uint32_t Neg(uint32_t code);
  uint32_t Negc(uint32_t code);
  uint32_t Nop(uint32_t code);
  uint32_t Not(uint32_t code);
  uint32_t Ocbi(uint32_t code);
  uint32_t Ocbp(uint32_t code);
  uint32_t Ocbwb(uint32_t code);
  uint32_t Or(uint32_t code);
  uint32_t Ori(uint32_t code);
  uint32_t Orm(uint32_t code);
  uint32_t Pref(uint32_t code);
  uint32_t Rotcl(uint32_t code);
  uint32_t Rotcr(uint32_t code);
  uint32_t Rotl(uint32_t code);
  uint32_t Rotr(uint32_t code);
  uint32_t Rte(uint32_t code);
  uint32_t Rts(uint32_t code);
  uint32_t Sets(uint32_t code);
  uint32_t Sett(uint32_t code);
  uint32_t Shad(uint32_t code);
  uint32_t Shal(uint32_t code);
  uint32_t Shar(uint32_t code);
  uint32_t Shld(uint32_t code);
  uint32_t Shll(uint32_t code);
  uint32_t Shll16(uint32_t code);
  uint32_t Shll2(uint32_t code);
  uint32_t Shll8(uint32_t code);
  uint32_t Shlr(uint32_t code);
  uint32_t Shlr16(uint32_t code);
  uint32_t Shlr2(uint32_t code);
  uint32_t Shlr8(uint32_t code);
  uint32_t Sleep(uint32_t code);
  uint32_t Stcgbr(uint32_t code);
  uint32_t Stcmgbr(uint32_t code);
  uint32_t Stcmrbank(uint32_t code);
  uint32_t Stcmspc(uint32_t code);
  uint32_t Stcmsr(uint32_t code);
  uint32_t Stcmssr(uint32_t code);
  uint32_t Stcmvbr(uint32_t code);
  uint32_t Stcrbank(uint32_t code);
  uint32_t Stcspc(uint32_t code);
  uint32_t Stcsr(uint32_t code);
  uint32_t Stcssr(uint32_t code);
  uint32_t Stcvbr(uint32_t code);
  uint32_t Stsmach(uint32_t code);
  uint32_t Stsmacl(uint32_t code);
  uint32_t Stsmmach(uint32_t code);
  uint32_t Stsmmacl(uint32_t code);
  uint32_t Stsmpr(uint32_t code);
  uint32_t Stspr(uint32_t code);
  uint32_t Sub(uint32_t code);
  uint32_t Subc(uint32_t code);
  uint32_t Subv(uint32_t code);
  uint32_t Swapb(uint32_t code);
  uint32_t Swapw(uint32_t code);
  uint32_t Tas(uint32_t code);
  uint32_t Trapa(uint32_t code);
  uint32_t Tst(uint32_t code);
  uint32_t Tsti(uint32_t code);
  uint32_t Tstm(uint32_t code);
  uint32_t Xor(uint32_t code);
  uint32_t Xori(uint32_t code);
  uint32_t Xorm(uint32_t code);
  uint32_t Xtrct(uint32_t code);

  uint32_t (Interpreter::*opTable[0x00010000])(uint32_t code);

  struct OpTemplate {
    uint32_t opcode;
    uint32_t mask;
    uint32_t (Interpreter::*op)(uint32_t code);
  };

  constexpr static OpTemplate opTemplate[] = {
      {0x300c, 0xf00f, &Interpreter::Add},
      {0x300e, 0xf00f, &Interpreter::Addc},
      {0x7000, 0xf000, &Interpreter::Addi},
      {0x300f, 0xf00f, &Interpreter::Addv},
      {0x2009, 0xf00f, &Interpreter::And},
      {0xc900, 0xff00, &Interpreter::Andi},
      {0xcd00, 0xff00, &Interpreter::Andm},
      {0x8b00, 0xff00, &Interpreter::Bf},
      {0x8f00, 0xff00, &Interpreter::Bfs},
      {0xa000, 0xf000, &Interpreter::Bra},
      {0x0023, 0xf0ff, &Interpreter::Braf},
      {0xb000, 0xf000, &Interpreter::Bsr},
      {0x0003, 0xf0ff, &Interpreter::Bsrf},
      {0x8900, 0xff00, &Interpreter::Bt},
      {0x8d00, 0xff00, &Interpreter::Bts},
      {0x0028, 0xffff, &Interpreter::Clrmac},
      {0x0048, 0xffff, &Interpreter::Clrs},
      {0x0008, 0xffff, &Interpreter::Clrt},
      {0x3000, 0xf00f, &Interpreter::Cmpeq},
      {0x3003, 0xf00f, &Interpreter::Cmpge},
      {0x3007, 0xf00f, &Interpreter::Cmpgt},
      {0x3006, 0xf00f, &Interpreter::Cmphi},
      {0x3002, 0xf00f, &Interpreter::Cmphs},
      {0x8800, 0xff00, &Interpreter::Cmpim},
      {0x4015, 0xf0ff, &Interpreter::Cmppl},
      {0x4011, 0xf0ff, &Interpreter::Cmppz},
      {0x200c, 0xf00f, &Interpreter::Cmpstr},
      {0x2007, 0xf00f, &Interpreter::Div0s},
      {0x0019, 0xffff, &Interpreter::Div0u},
      {0x3004, 0xf00f, &Interpreter::Div1},
      {0x300d, 0xf00f, &Interpreter::Dmuls},
      {0x3005, 0xf00f, &Interpreter::Dmulu},
      {0x4010, 0xf0ff, &Interpreter::Dt},
      {0x600e, 0xf00f, &Interpreter::Extsb},
      {0x600f, 0xf00f, &Interpreter::Extsw},
      {0x600c, 0xf00f, &Interpreter::Extub},
      {0x600d, 0xf00f, &Interpreter::Extuw},
      {0x402b, 0xf0ff, &Interpreter::Jmp},
      {0x400b, 0xf0ff, &Interpreter::Jsr},
      {0x401e, 0xf0ff, &Interpreter::Ldcgbr},
      {0x4017, 0xf0ff, &Interpreter::Ldcmgbr},
      {0x4087, 0xf08f, &Interpreter::Ldcmrbank},
      {0x4047, 0xf0ff, &Interpreter::Ldcmspc},
      {0x4007, 0xf0ff, &Interpreter::Ldcmsr},
      {0x4037, 0xf0ff, &Interpreter::Ldcmssr},
      {0x4027, 0xf0ff, &Interpreter::Ldcmvbr},
      {0x408e, 0xf08f, &Interpreter::Ldcrbank},
      {0x404e, 0xf0ff, &Interpreter::Ldcspc},
      {0x400e, 0xf0ff, &Interpreter::Ldcsr},
      {0x403e, 0xf0ff, &Interpreter::Ldcssr},
      {0x402e, 0xf0ff, &Interpreter::Ldcvbr},
      {0x400a, 0xf0ff, &Interpreter::Ldsmach},
      {0x401a, 0xf0ff, &Interpreter::Ldsmacl},
      {0x4006, 0xf0ff, &Interpreter::Ldsmmach},
      {0x4016, 0xf0ff, &Interpreter::Ldsmmacl},
      {0x4026, 0xf0ff, &Interpreter::Ldsmpr},
      {0x402a, 0xf0ff, &Interpreter::Ldspr},
      {0x0038, 0xffff, &Interpreter::Ldtlb},
      {0x000f, 0xf00f, &Interpreter::Macl},
      {0x400f, 0xf00f, &Interpreter::Macw},
      {0x6003, 0xf00f, &Interpreter::Mov},
      {0xc700, 0xff00, &Interpreter::Mova},
      {0x6000, 0xf00f, &Interpreter::Movbl},
      {0x000c, 0xf00f, &Interpreter::Movbl0},
      {0x8400, 0xff00, &Interpreter::Movbl4},
      {0xc400, 0xff00, &Interpreter::Movblg},
      {0x2004, 0xf00f, &Interpreter::Movbm},
      {0x6004, 0xf00f, &Interpreter::Movbp},
      {0x2000, 0xf00f, &Interpreter::Movbs},
      {0x0004, 0xf00f, &Interpreter::Movbs0},
      {0x8000, 0xff00, &Interpreter::Movbs4},
      {0xc000, 0xff00, &Interpreter::Movbsg},
      {0x00c3, 0xf0ff, &Interpreter::Movcal},
      {0xe000, 0xf000, &Interpreter::Movi},
      {0xd000, 0xf000, &Interpreter::Movli},
      {0x6002, 0xf00f, &Interpreter::Movll},
      {0x000e, 0xf00f, &Interpreter::Movll0},
      {0x5000, 0xf000, &Interpreter::Movll4},
      {0xc600, 0xff00, &Interpreter::Movllg},
      {0x2006, 0xf00f, &Interpreter::Movlm},
      {0x6006, 0xf00f, &Interpreter::Movlp},
      {0x2002, 0xf00f, &Interpreter::Movls},
      {0x0006, 0xf00f, &Interpreter::Movls0},
      {0x1000, 0xf000, &Interpreter::Movls4},
      {0xc200, 0xff00, &Interpreter::Movlsg},
      {0x0029, 0xf0ff, &Interpreter::Movt},
      {0x9000, 0xf000, &Interpreter::Movwi},
      {0x6001, 0xf00f, &Interpreter::Movwl},
      {0x000d, 0xf00f, &Interpreter::Movwl0},
      {0x8500, 0xff00, &Interpreter::Movwl4},
      {0xc500, 0xff00, &Interpreter::Movwlg},
      {0x2005, 0xf00f, &Interpreter::Movwm},
      {0x6005, 0xf00f, &Interpreter::Movwp},
      {0x2001, 0xf00f, &Interpreter::Movws},
      {0x0005, 0xf00f, &Interpreter::Movws0},
      {0x8100, 0xff00, &Interpreter::Movws4},
      {0xc100, 0xff00, &Interpreter::Movwsg},
      {0x0007, 0xf00f, &Interpreter::Mull},
      {0x200f, 0xf00f, &Interpreter::Mulsw},
      {0x200e, 0xf00f, &Interpreter::Mulsu},
      {0x600b, 0xf00f, &Interpreter::Neg},
      {0x600a, 0xf00f, &Interpreter::Negc},
      {0x0009, 0xffff, &Interpreter::Nop},
      {0x6007, 0xf00f, &Interpreter::Not},
      {0x0093, 0xf0ff, &Interpreter::Ocbi},
      {0x00a3, 0xf0ff, &Interpreter::Ocbp},
      {0x00b3, 0xf0ff, &Interpreter::Ocbwb},
      {0x200b, 0xf00f, &Interpreter::Or},
      {0xcb00, 0xff00, &Interpreter::Ori},
      {0xcf00, 0xff00, &Interpreter::Orm},
      {0x0083, 0xf0ff, &Interpreter::Pref},
      {0x4024, 0xf0ff, &Interpreter::Rotcl},
      {0x4025, 0xf0ff, &Interpreter::Rotcr},
      {0x4004, 0xf0ff, &Interpreter::Rotl},
      {0x4005, 0xf0ff, &Interpreter::Rotr},
      {0x002b, 0xffff, &Interpreter::Rte},
      {0x000b, 0xffff, &Interpreter::Rts},
      {0x0058, 0xffff, &Interpreter::Sets},
      {0x0018, 0xffff, &Interpreter::Sett},
      {0x400c, 0xf00f, &Interpreter::Shad},
      {0x4020, 0xf0ff, &Interpreter::Shal},
      {0x4021, 0xf0ff, &Interpreter::Shar},
      {0x400d, 0xf00f, &Interpreter::Shld},
      {0x4000, 0xf0ff, &Interpreter::Shll},
      {0x4028, 0xf0ff, &Interpreter::Shll16},
      {0x4008, 0xf0ff, &Interpreter::Shll2},
      {0x4018, 0xf0ff, &Interpreter::Shll8},
      {0x4001, 0xf0ff, &Interpreter::Shlr},
      {0x4029, 0xf0ff, &Interpreter::Shlr16},
      {0x4009, 0xf0ff, &Interpreter::Shlr2},
      {0x4019, 0xf0ff, &Interpreter::Shlr8},
      {0x001b, 0xffff, &Interpreter::Sleep},
      {0x0012, 0xf0ff, &Interpreter::Stcgbr},
      {0x4013, 0xf0ff, &Interpreter::Stcmgbr},
      {0x4083, 0xf08f, &Interpreter::Stcmrbank},
      {0x4043, 0xf0ff, &Interpreter::Stcmspc},
      {0x4003, 0xf0ff, &Interpreter::Stcmsr},
      {0x4033, 0xf0ff, &Interpreter::Stcmssr},
      {0x4023, 0xf0ff, &Interpreter::Stcmvbr},
      {0x0082, 0xf08f, &Interpreter::Stcrbank},
      {0x0042, 0xf0ff, &Interpreter::Stcspc},
      {0x0002, 0xf0ff, &Interpreter::Stcsr},
      {0x0032, 0xf0ff, &Interpreter::Stcssr},
      {0x0022, 0xf0ff, &Interpreter::Stcvbr},
      {0x000a, 0xf0ff, &Interpreter::Stsmach},
      {0x001a, 0xf0ff, &Interpreter::Stsmacl},
      {0x4002, 0xf0ff, &Interpreter::Stsmmach},
      {0x4012, 0xf0ff, &Interpreter::Stsmmacl},
      {0x4022, 0xf0ff, &Interpreter::Stsmpr},
      {0x002a, 0xf0ff, &Interpreter::Stspr},
      {0x3008, 0xf00f, &Interpreter::Sub},
      {0x300a, 0xf00f, &Interpreter::Subc},
      {0x300b, 0xf00f, &Interpreter::Subv},
      {0x6008, 0xf00f, &Interpreter::Swapb},
      {0x6009, 0xf00f, &Interpreter::Swapw},
      {0x401b, 0xf0ff, &Interpreter::Tas},
      {0xc300, 0xff00, &Interpreter::Trapa},
      {0x2008, 0xf00f, &Interpreter::Tst},
      {0xc800, 0xff00, &Interpreter::Tsti},
      {0xcc00, 0xff00, &Interpreter::Tstm},
      {0x200a, 0xf00f, &Interpreter::Xor},
      {0xca00, 0xff00, &Interpreter::Xori},
      {0xce00, 0xff00, &Interpreter::Xorm},
      {0x200d, 0xf00f, &Interpreter::Xtrct},
  };
};
}  // namespace sh3